let reqlib = require("app-root-path").require;
let { expect } = require("chai");
let { Level } = reqlib("/src/core/Level");
let { LevelBuilder } = reqlib("/src/util/LevelBuilder");
let { GameState } = reqlib("/src/core/GameState");

describe("Level", () => {
    it("should import correctly", () => {});
    it("should construct with width and height", () => {
        let level = new Level(4, 3);
        expect(level.width).to.equal(4);
        expect(level.height).to.equal(3);
    });
    it("should have empty maps initially", () => {
        let level = new Level(4, 3);
        expect(level.tileMap.size).to.equal(0);
        expect(level.entityMap.size).to.equal(0);
    });
    it("should not error when getting default viewport", () => {
        let level = new Level(4, 3);
        level.getDefaultViewport();
    });
    it("should have viewport centered on player", () => {
        let level = LevelBuilder.generateFromSchematic(`
            . tile floor
            P entity player
            ===
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            .......P........
            ................
            ................
            ................
            ................
            ................
        `);
        let state = new GameState();
        state.setLevel(level);
        expect(level.getDefaultViewport().getCenter().asArray()).to.deep.equals([7, 7]);

        level = LevelBuilder.generateFromSchematic(`
            . tile floor
            P entity player
            ===
            P...............
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
        `);
        state = new GameState();
        state.setLevel(level);
        expect(level.getDefaultViewport().getCenter().asArray()).to.deep.equals([4, 4]);

        level = LevelBuilder.generateFromSchematic(`
            . tile floor
            P entity player
            ===
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ................
            ...............P
        `);
        state = new GameState();
        state.setLevel(level);
        expect(level.getDefaultViewport().getCenter().asArray()).to.deep.equals([11, 8]);
    });
});
